{"version":3,"sources":["webpack:///src/app/homepage/pages/graphql/federation/federation.component.ts","webpack:///src/app/homepage/pages/graphql/federation/federation.component.html","webpack:///src/app/homepage/pages/graphql/graphql.module.ts","webpack:///src/app/homepage/pages/graphql/guards-interceptors/guards-interceptors.component.ts","webpack:///src/app/homepage/pages/graphql/guards-interceptors/guards-interceptors.component.html","webpack:///src/app/homepage/pages/graphql/mutations/mutations.component.ts","webpack:///src/app/homepage/pages/graphql/mutations/mutations.component.html","webpack:///src/app/homepage/pages/graphql/quick-start/quick-start.component.ts","webpack:///src/app/homepage/pages/graphql/quick-start/quick-start.component.html","webpack:///src/app/homepage/pages/graphql/resolvers-map/resolvers-map.component.ts","webpack:///src/app/homepage/pages/graphql/resolvers-map/resolvers-map.component.html","webpack:///src/app/homepage/pages/graphql/scalars/scalars.component.ts","webpack:///src/app/homepage/pages/graphql/scalars/scalars.component.html","webpack:///src/app/homepage/pages/graphql/schema-stitching/schema-stitching.component.ts","webpack:///src/app/homepage/pages/graphql/schema-stitching/schema-stitching.component.html","webpack:///src/app/homepage/pages/graphql/subscriptions/subscriptions.component.ts","webpack:///src/app/homepage/pages/graphql/subscriptions/subscriptions.component.html"],"names":["FederationComponent","selector","templateUrl","changeDetection","OnPush","routes","path","component","data","title","redirectTo","GraphqlModule","forChild","imports","declarations","GuardsInterceptorsComponent","MutationsComponent","QuickStartComponent","ResolversMapComponent","ScalarsComponent","SchemaStitchingComponent","SubscriptionsComponent"],"mappings":"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","file":"homepage-pages-graphql-graphql-module-es5.js","sourcesContent":["import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-federation',\n  templateUrl: './federation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FederationComponent extends BasePageComponent {}\n","\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/federation.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"federation\">Federation</h3>\n<p><a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/docs/apollo-server/federation/introduction/\">Apollo Federation</a> offers a means of splitting your monolith GraphQL server into independent microservices. It consists of two components: A gateway and one or more federated microservices. Each microservice holds part of the schema and the gateway merges the schemas into one single schema that can be consumed by the client.</p>\n<p>To quote the <a rel='nofollow' target='_blank' href=\"https://blog.apollographql.com/apollo-federation-f260cf525d21\">Apollo docs</a>, Federation is designed with these core principles:</p>\n<ul>\n<li>Building a graph should be <strong>declarative.</strong> With federation, you compose a graph declaratively from within your schema instead of writing imperative schema stitching code.</li>\n<li>Code should be separated by <strong>concern</strong>, not by types. Often no single team controls every aspect of an important type like a User or Product, so the definition of these types should be distributed across teams and codebases, rather than centralized.</li>\n<li>The graph should be simple for clients to consume. Together, federated services can form a complete, product-focused graph that accurately reflects how it’s being consumed on the client.</li>\n<li>It’s just <strong>GraphQL</strong>, using only spec-compliant features of the language. Any language, not just JavaScript, can implement federation.</li>\n</ul>\n<blockquote class=\"\nwarning \"><strong>Note</strong> Apollo Federation currently does not support subscriptions, and only the schema-first approach is currently supported due to limitations with the decorators not yet supporting GraphQL directives<sup><a rel='nofollow' target='_blank' href=\"https://github.com/MichalLytek/type-graphql/issues/351\">1</a></sup>\n</blockquote>\n<p>In the next example, we&#39;ll set up a demo application with a gateway and two federated endpoints: a user- and posts service.</p>\n<h4 appAnchor id=\"federated-example-users\"><span>Federated example: Users</span></h4>\n<p>First install the optional dependency for federation:</p>\n<pre><code class=\"language-bash\">\n$ npm install --save @apollo/federation</code></pre>\n<p>The User service has a simple schema. Note the <code>@key</code> directive, it tells the Apollo query planner that a particular instance of User can be fetched if you have its <code>id</code>. Also note that we extend the Query type.</p>\n<pre><code class=\"language-graphql\">\ntype User @key(fields: &quot;id&quot;) &#123;\n  id: ID!\n  name: String!\n&#125;\n\nextend type Query &#123;\n  getUser(id: ID!): User\n&#125;</code></pre>\n<p>Our resolver has one extra method: <code>resolveReference</code>. It&#39;s called by the Apollo Gateway whenever a related resource requires a User instance. We&#39;ll see an example of this in the Posts service later on. Please note the <code>@ResolveReference</code> decorator.</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Args, Query, Resolver, ResolveReference &#125; from &#39;@nestjs/graphql&#39;;\nimport &#123; UsersService &#125; from &#39;./users.service&#39;;\n\n@Resolver(&#39;User&#39;)\nexport class UsersResolvers &#123;\n  constructor(private readonly usersService: UsersService) &#123;&#125;\n\n  @Query()\n  getUser(@Args(&#39;id&#39;) id: string) &#123;\n    return this.usersService.findById(id);\n  &#125;\n\n  @ResolveReference()\n  resolveReference(reference: &#123; __typename: string; id: string &#125;) &#123;\n    return this.usersService.findById(reference.id);\n  &#125;\n&#125;</code></pre>\n<p>Finally, we hook everything up in a module together with a <code>GraphQLFederationModule</code>. This module accepts the same options as the regular <code>GraphQLModule</code>.</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; GraphQLFederationModule &#125; from &#39;@nestjs/graphql&#39;;\nimport &#123; UsersResolvers &#125; from &#39;./users.resolvers&#39;;\n\n@Module(&#123;\n  imports: [\n    GraphQLFederationModule.forRoot(&#123;\n      typePaths: [&#39;**/*.graphql&#39;],\n    &#125;),\n  ],\n  providers: [UsersResolvers],\n&#125;)\nexport class AppModule &#123;&#125;</code></pre>\n<h4 appAnchor id=\"federated-example-posts\"><span>Federated example: Posts</span></h4>\n<p>The Posts service references the User type in its schema by marking it with the <code>extend</code> keyword. It also adds one property to the User type. Note the <code>@key</code> directive used for matching instances of User, and the <code>@external</code> directive indicating that the <code>id</code> field is managed elsewhere.</p>\n<pre><code class=\"language-graphql\">\ntype Post @key(fields: &quot;id&quot;) &#123;\n  id: ID!\n  title: String!\n  body: String!\n  user: User\n&#125;\n\nextend type User @key(fields: &quot;id&quot;) &#123;\n  id: ID! @external\n  posts: [Post]\n&#125;\n\nextend type Query &#123;\n  getPosts: [Post]\n&#125;</code></pre>\n<p>Our resolver has one method of interest here: <code>getUser</code>. It returns a reference containing <code>__typename</code> and any additional properties your application needs to resolve the reference, in this case only an <code>id</code>. The <code>__typename</code> is used by the GraphQL Gateway to pinpoint the microservice responsible for the User type and request the instance. The User service discussed above will be called on the <code>resolveReference</code> method.</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Query, Resolver, Parent, ResolveProperty &#125; from &#39;@nestjs/graphql&#39;;\nimport &#123; PostsService &#125; from &#39;./posts.service&#39;;\nimport &#123; Post &#125; from &#39;./posts.interfaces&#39;;\n\n@Resolver(&#39;Post&#39;)\nexport class PostsResolvers &#123;\n  constructor(private readonly postsService: PostsService) &#123;&#125;\n\n  @Query(&#39;getPosts&#39;)\n  getPosts() &#123;\n    return this.postsService.findAll();\n  &#125;\n\n  @ResolveProperty(&#39;user&#39;)\n  getUser(@Parent() post: Post) &#123;\n    return &#123; __typename: &#39;User&#39;, id: post.userId &#125;;\n  &#125;\n&#125;</code></pre>\n<p>The Posts service has virtually the same module, but is included below for the sake of completeness:</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; GraphQLFederationModule &#125; from &#39;@nestjs/graphql&#39;;\nimport &#123; PostsResolvers &#125; from &#39;./posts.resolvers&#39;;\n\n@Module(&#123;\n  imports: [\n    GraphQLFederationModule.forRoot(&#123;\n      typePaths: [&#39;**/*.graphql&#39;],\n    &#125;),\n  ],\n  providers: [PostsResolvers],\n&#125;)\nexport class AppModule &#123;&#125;</code></pre>\n<h4 appAnchor id=\"federated-example-gateway\"><span>Federated example: Gateway</span></h4>\n<p>First install the optional dependency for the gateway: <code>npm install --save @apollo/gateway</code>.</p>\n<p>Our gateway only needs a list of endpoints and will auto-discover the schemas from there. The code for our gateway is therefore very short:</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; GraphQLGatewayModule &#125; from &#39;@nestjs/graphql&#39;;\n\n@Module(&#123;\n  imports: [\n    GraphQLGatewayModule.forRoot(&#123;\n      server: &#123;\n        // ... Apollo server options\n        cors: true,\n      &#125;,\n      gateway: &#123;\n        serviceList: [\n          &#123; name: &#39;users&#39;, url: &#39;http://user-service/graphql&#39; &#125;,\n          &#123; name: &#39;posts&#39;, url: &#39;http://post-service/graphql&#39; &#125;,\n        ],\n      &#125;,\n    &#125;),\n  ],\n&#125;)\nexport class AppModule &#123;&#125;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> Apollo recommends that you don&#39;t rely on the service discovery in a production environment but use their <a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/docs/graph-manager/federation/\">Graph Manager</a> instead.\n</blockquote>\n<h4 appAnchor id=\"sharing-context\"><span>Sharing context</span></h4>\n<p>You can customize the requests between the gateway and federated services using a build service. This allows you to share context about the request. You can easily extend the default <code>RemoteGraphQLDataSource</code> and implement one of the hooks. Please refer to <a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/docs/apollo-server/api/apollo-gateway/#remotegraphqldatasource\">Apollo Docs</a> on <code>RemoteGraphQLDataSource</code> for more information about the possibilities.</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; GATEWAY_BUILD_SERVICE, GraphQLGatewayModule &#125; from &#39;@nestjs/graphql&#39;;\nimport &#123; RemoteGraphQLDataSource &#125; from &#39;@apollo/gateway&#39;;\nimport &#123; decode &#125; from &#39;jsonwebtoken&#39;;\n\nclass AuthenticatedDataSource extends RemoteGraphQLDataSource &#123;\n  async willSendRequest(&#123; request, context &#125;) &#123;\n    const &#123; userId &#125; = await decode(context.jwt);\n    request.http.headers.set(&#39;x-user-id&#39;, userId);\n  &#125;\n&#125;\n\n@Module(&#123;\n  providers: [\n    &#123;\n      provide: AuthenticatedDataSource,\n      useValue: AuthenticatedDataSource,\n    &#125;,\n    &#123;\n      provide: GATEWAY_BUILD_SERVICE,\n      useFactory: AuthenticatedDataSource =&gt; &#123;\n        return (&#123; name, url &#125;) =&gt; new AuthenticatedDataSource(&#123; url &#125;);\n      &#125;,\n      inject: [AuthenticatedDataSource],\n    &#125;,\n  ],\n  exports: [GATEWAY_BUILD_SERVICE],\n&#125;)\nclass BuildServiceModule &#123;&#125;\n\n@Module(&#123;\n  imports: [\n    GraphQLGatewayModule.forRootAsync(&#123;\n      useFactory: async () =&gt; (&#123;\n        gateway: &#123;\n          serviceList: [\n            /* services */\n          ],\n        &#125;,\n        server: &#123;\n          context: (&#123; req &#125;) =&gt; (&#123;\n            jwt: req.headers.authorization,\n          &#125;),\n        &#125;,\n      &#125;),\n      imports: [BuildServiceModule],\n      inject: [GATEWAY_BUILD_SERVICE],\n    &#125;),\n  ],\n&#125;)\nexport class AppModule &#123;&#125;</code></pre>\n<h4 appAnchor id=\"async-configuration\"><span>Async configuration</span></h4>\n<p>Both the Federation and Gateway modules support asynchronous initialization using the same <code>forRootAsync</code> that&#39;s documented in <a href=\"/graphql/quick-start#async-configuration\">Quick start</a>.</p>\n\n</div>\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { GuardsInterceptorsComponent } from './guards-interceptors/guards-interceptors.component';\nimport { MutationsComponent } from './mutations/mutations.component';\nimport { QuickStartComponent } from './quick-start/quick-start.component';\nimport { ResolversMapComponent } from './resolvers-map/resolvers-map.component';\nimport { ScalarsComponent } from './scalars/scalars.component';\nimport { SchemaStitchingComponent } from './schema-stitching/schema-stitching.component';\nimport { SubscriptionsComponent } from './subscriptions/subscriptions.component';\nimport { FederationComponent } from './federation/federation.component';\n\nconst routes: Routes = [\n  {\n    path: 'quick-start',\n    component: QuickStartComponent,\n    data: { title: 'GraphQL + TypeScript' },\n  },\n  {\n    path: 'resolvers-map',\n    component: ResolversMapComponent,\n    data: { title: 'GraphQL + TypeScript - Resolvers Map' },\n  },\n  {\n    path: 'mutations',\n    component: MutationsComponent,\n    data: { title: 'GraphQL + TypeScript - Mutations' },\n  },\n  {\n    path: 'scalars',\n    component: ScalarsComponent,\n    data: { title: 'GraphQL + TypeScript - Scalars' },\n  },\n  {\n    path: 'subscriptions',\n    component: SubscriptionsComponent,\n    data: { title: 'GraphQL + TypeScript - Subscriptions' },\n  },\n  {\n    path: 'guards-interceptors',\n    redirectTo: 'tooling',\n  },\n  {\n    path: 'tooling',\n    component: GuardsInterceptorsComponent,\n    data: { title: 'GraphQL + TypeScript - Other features' },\n  },\n  {\n    path: 'schema-stitching',\n    component: SchemaStitchingComponent,\n    data: { title: 'GraphQL - Schema Stitching' },\n  },\n  {\n    path: 'federation',\n    component: FederationComponent,\n    data: { title: 'GraphQL - Federation' },\n  },\n];\n\n@NgModule({\n  imports: [CommonModule, SharedModule, RouterModule.forChild(routes)],\n  declarations: [\n    QuickStartComponent,\n    ResolversMapComponent,\n    MutationsComponent,\n    SubscriptionsComponent,\n    SchemaStitchingComponent,\n    GuardsInterceptorsComponent,\n    ScalarsComponent,\n    FederationComponent,\n  ],\n})\nexport class GraphqlModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-guards-interceptors',\n  templateUrl: './guards-interceptors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GuardsInterceptorsComponent extends BasePageComponent {}\n","\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/guards-interceptors.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"other-features\">Other features</h3>\n<p>In the GraphQL world, there is a lot of debate about handling issues like <strong>authentication</strong>, or <strong>side-effects</strong> of operations. Should we handle things inside the business logic? Should we use a higher-order function to enhance queries and mutations with authorization logic? Or should we use <a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/docs/apollo-server/schema/directives/\">schema directives</a>? There is no single one-size-fits-all answer to these questions.</p>\n<p>Nest helps address these issues with its cross-platform features like <a routerLink=\"/guards\">guards</a> and <a routerLink=\"/interceptors\">interceptors</a>. The philosophy is to reduce redundancy and provide tooling that helps create well-structured, readable, and consistent applications.</p>\n<h4 appAnchor id=\"overview\"><span>Overview</span></h4>\n<p>You can use standard <a routerLink=\"/guards\">guards</a>, <a routerLink=\"/interceptors\">interceptors</a>, <a routerLink=\"/exception-filters\">filters</a> and <a routerLink=\"/pipes\">pipes</a> in the same fashion with GraphQL as with any RESTful application. Additionally, you can easily create your own decorators by leveraging the <a routerLink=\"/custom-decorators\">custom decorators</a> feature. Let&#39;s take a look at a sample GraphQL query handler.</p>\n<pre><code class=\"language-typescript\">\n@Query(&#39;author&#39;)\n@UseGuards(AuthGuard)\nasync getAuthor(@Args(&#39;id&#39;, ParseIntPipe) id: number) &#123;\n  return this.authorsService.findOneById(id);\n&#125;</code></pre>\n<p>As you can see, GraphQL works with both guards and pipes in the same way as HTTP REST handlers. Because of this, you can move your authentication logic to a guard; you can even reuse the same guard class across both a REST and GraphQL API interface. Similarly, interceptors work across both types of applications in the same way:</p>\n<pre><code class=\"language-typescript\">\n@Mutation()\n@UseInterceptors(EventsInterceptor)\nasync upvotePost(@Args(&#39;postId&#39;) postId: number) &#123;\n  return this.postsService.upvoteById(&#123; id: postId &#125;);\n&#125;</code></pre>\n<h4 appAnchor id=\"execution-context\"><span>Execution context</span></h4>\n<p>Since GraphQL receives a different type of data in the incoming request, the <a rel='nofollow' target='_blank' href=\"https://docs.nestjs.com/fundamentals/execution-context\"><code>ExecutionContext</code></a> received by both guards and interceptors is somewhat different with GraphQL vs. REST. GraphQL resolvers have a distinct set of arguments: <code>root</code>, <code>args</code>, <code>context</code>, and <code>info</code>. Thus guards and interceptors must transform the generic <code>ExecutionContext</code> to a <code>GqlExecutionContext</code>. This is straightforward:</p>\n<pre><code class=\"language-typescript\">\nimport &#123; CanActivate, ExecutionContext, Injectable &#125; from &#39;@nestjs/common&#39;;\nimport &#123; GqlExecutionContext &#125; from &#39;@nestjs/graphql&#39;;\n\n@Injectable()\nexport class AuthGuard implements CanActivate &#123;\n  canActivate(context: ExecutionContext): boolean &#123;\n    const ctx = GqlExecutionContext.create(context);\n    return true;\n  &#125;\n&#125;</code></pre>\n<p>The GraphQL context object returned by <code>GqlExecutionContext.create()</code> exposes a <strong>get</strong> method for each GraphQL resolver argument (e.g., <code>getArgs()</code>, <code>getContext()</code>, etc). Once transformed, we can easily pick out any GraphQL argument for the current request.</p>\n<h4 appAnchor id=\"exception-filters\"><span>Exception filters</span></h4>\n<p>Nest standard <a routerLink=\"/exception-filters\">exception filters</a> are compatible with GraphQL applications as well. As with <code>ExecutionContext</code>, GraphQL apps should transform the <code>ArgumentsHost</code> object to a <code>GqlArgumentsHost</code> object.</p>\n<pre><code class=\"language-typescript\">\n@Catch(HttpException)\nexport class HttpExceptionFilter implements GqlExceptionFilter &#123;\n  catch(exception: HttpException, host: ArgumentsHost) &#123;\n    const gqlHost = GqlArgumentsHost.create(host);\n    return exception;\n  &#125;\n&#125;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> Both <code>GqlExceptionFilter</code> and <code>GqlArgumentsHost</code> are imported from the <code>@nestjs/graphql</code> package.\n</blockquote>\n<p>Note that unlike the REST case, you don&#39;t use the native <code>response</code> object to generate a response.</p>\n<h4 appAnchor id=\"custom-decorators\"><span>Custom decorators</span></h4>\n<p>As mentioned, the <a routerLink=\"/custom-decorators\">custom decorators</a> feature works as expected with GraphQL resolvers. The only difference is that the factory function takes an array of GraphQL request arguments as its second argument, instead of a single <code>request</code> object (as with REST applications).</p>\n<pre><code class=\"language-typescript\">\nexport const User = createParamDecorator(\n  (data, [root, args, ctx, info]) =&gt; ctx.user,\n);</code></pre>\n<p>Use the <code>@User()</code> custom decorator as follows:</p>\n<pre><code class=\"language-typescript\">\n@Mutation()\nasync upvotePost(\n  @User() user: UserEntity,\n  @Args(&#39;postId&#39;) postId: number,\n) &#123;&#125;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> In the above example, we have assumed that the <code>user</code> object is assigned to the context of your GraphQL application.\n</blockquote>\n\n</div>\n\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-mutations',\n  templateUrl: './mutations.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MutationsComponent extends BasePageComponent {}\n","\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/mutations.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"mutations\">Mutations</h3>\n<p>In GraphQL, we use mutations to modify server-side data (read more <a rel='nofollow' target='_blank' href=\"http://graphql.org/learn/queries/#mutations\">here</a>). The official <a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/docs/graphql-tools/generate-schema.html\">Apollo</a> documentation uses an <code>upvotePost()</code> mutation example. This mutation implements a method to increase a post&#39;s <code>votes</code> property value. To create an equivalent mutation in Nest, we&#39;ll make use of the <code>@Mutation()</code> decorator.</p>\n<h4 appAnchor id=\"schema-first\"><span>Schema first</span></h4>\n<p>Let&#39;s extend our <code>AuthorResolver</code> used in the previous section (see <a routerLink=\"/graphql/resolvers-map\">resolvers</a>).</p>\n<pre><code class=\"language-typescript\">\n@Resolver(&#39;Author&#39;)\nexport class AuthorResolver &#123;\n  constructor(\n    private readonly authorsService: AuthorsService,\n    private readonly postsService: PostsService,\n  ) &#123;&#125;\n\n  @Query(&#39;author&#39;)\n  async getAuthor(@Args(&#39;id&#39;) id: number) &#123;\n    return this.authorsService.findOneById(id);\n  &#125;\n\n  @Mutation()\n  async upvotePost(@Args(&#39;postId&#39;) postId: number) &#123;\n    return this.postsService.upvoteById(&#123; id: postId &#125;);\n  &#125;\n\n  @ResolveProperty(&#39;posts&#39;)\n  async getPosts(@Parent() &#123; id &#125;) &#123;\n    return this.postsService.findAll(&#123; authorId: id &#125;);\n  &#125;\n&#125;</code></pre>\n<p>Note that we assumed above that the business logic has been moved to the <code>PostsService</code> (querying the post and incrementing its <code>votes</code> property).</p>\n<h4 appAnchor id=\"type-definitions\"><span>Type definitions</span></h4>\n<p>The last step is to add our mutation to the existing types definition.</p>\n<pre><code class=\"language-graphql\">\ntype Author &#123;\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post]\n&#125;\n\ntype Post &#123;\n  id: Int!\n  title: String\n  votes: Int\n&#125;\n\ntype Query &#123;\n  author(id: Int!): Author\n&#125;\n\ntype Mutation &#123;\n  upvotePost(postId: Int!): Post\n&#125;</code></pre>\n<p>The <code>upvotePost(postId: Int!): Post</code> mutation is now available to be called as part of our application&#39;s GraphQL API.</p>\n<h4 appAnchor id=\"code-first\"><span>Code first</span></h4>\n<p>Let&#39;s add another method to the <code>AuthorResolver</code> used in the previous section (see <a routerLink=\"/graphql/resolvers-map\">resolvers</a>).</p>\n<pre><code class=\"language-typescript\">\n@Resolver(of =&gt; Author)\nexport class AuthorResolver &#123;\n  constructor(\n    private readonly authorsService: AuthorsService,\n    private readonly postsService: PostsService,\n  ) &#123;&#125;\n\n  @Query(returns =&gt; Author, &#123; name: &#39;author&#39; &#125;)\n  async getAuthor(@Args(&#123; name: &#39;id&#39;, type: () =&gt; Int &#125;) id: number) &#123;\n    return this.authorsService.findOneById(id);\n  &#125;\n\n  @Mutation(returns =&gt; Post)\n  async upvotePost(@Args(&#123; name: &#39;postId&#39;, type: () =&gt; Int &#125;) postId: number) &#123;\n    return this.postsService.upvoteById(&#123; id: postId &#125;);\n  &#125;\n\n  @ResolveProperty(&#39;posts&#39;)\n  async getPosts(@Parent() author) &#123;\n    const &#123; id &#125; = author;\n    return this.postsService.findAll(&#123; authorId: id &#125;);\n  &#125;\n&#125;</code></pre>\n<p>The <code>upvotePost()</code> method takes <code>postId</code> (<code>Int</code>) as an argument and returns an updated <code>Post</code> entity. For the reasons explained in the <a routerLink=\"/graphql/resolvers-map\">resolvers</a> section, we have to explicitly set the expected type.</p>\n<p>If the mutation needs to take an object as an argument, we can create an input type.</p>\n<pre><code class=\"language-typescript\">\n@InputType()\nexport class UpvotePostInput &#123;\n  @Field() postId: number;\n&#125;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> Both <code>@InputType()</code> and <code>@Field()</code> are imported from the <code>type-graphql</code> package.\n</blockquote>\n<p>We can then use this type in the resolver class:</p>\n<pre><code class=\"language-typescript\">\n@Mutation(returns =&gt; Post)\nasync upvotePost(\n  @Args(&#39;upvotePostData&#39;) upvotePostData: UpvotePostInput,\n) &#123;&#125;</code></pre>\n\n</div>\n\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-quick-start',\n  templateUrl: './quick-start.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class QuickStartComponent extends BasePageComponent {}\n","\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/quick-start.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h2 id=\"harnessing-the-power-of-typescript--graphql\">Harnessing the power of TypeScript &amp; GraphQL</h2>\n<p><a rel='nofollow' target='_blank' href=\"https://graphql.org/\">GraphQL</a> is a powerful query language for APIs and a runtime for fulfilling those queries with your existing data. It&#39;s an elegant approach that solves many problems typically found with REST APIs. For background, we suggest reading this <a rel='nofollow' target='_blank' href=\"https://dev-blog.apollodata.com/graphql-vs-rest-5d425123e34b\">comparison</a> between GraphQL and REST. </p>\n<p>GraphQL combined with <a rel='nofollow' target='_blank' href=\"https://www.typescriptlang.org/\">TypeScript</a> helps you develop better type safety with your GraphQL queries, giving you get end-to-end typing.</p>\n<p>In this chapter, we assume a basic understanding of GraphQL, and focus on how to work with the built-in <code>@nestjs/graphql</code> module. The <code>GraphQLModule</code> is a wrapper around the <a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/\">Apollo</a> server. We use this proven GraphQL package to provide a way to use GraphQL with Nest.</p>\n<h4 appAnchor id=\"installation\"><span>Installation</span></h4>\n<p>Start by installing the required packages:</p>\n<pre><code class=\"language-bash\">\n$ npm i --save @nestjs/graphql graphql-tools graphql</code></pre>\n<p>And depending on what you use (Express or Fastify), you need to install <code>apollo-server-express</code> or <code>apollo-server-fastify</code>.</p>\n<h4 appAnchor id=\"overview\"><span>Overview</span></h4>\n<p>Nest offers two ways of building GraphQL applications, the <strong>schema first</strong> and the <strong>code first</strong> methods.</p>\n<p>In the <strong>schema first</strong> approach, the source of truth is a GraphQL SDL (Schema Definition Language) SDL is a language-agnostic way to share schema files between different platforms. Nest automatically generates your TypeScript definitions based on the GraphQL schemas (using either classes or interfaces) to reduce redundancy.</p>\n<p>In the <strong>code first</strong> approach, you use decorators and TypeScript classes to generate the corresponding GraphQL schema. This approach is useful if you prefer to work exclusively with TypeScript and avoid context switching between language syntaxes.</p>\n<h4 appAnchor id=\"getting-started-with-graphql--typescript\"><span>Getting started with GraphQL &amp; TypeScript</span></h4>\n<p>Once the packages are installed, we can import the <code>GraphQLModule</code> and configure it with the <code>forRoot()</code> static method.</p>\n\n<span class=\"filename\">\n<app-tabs #app78ca2307a2902db198eea27ba06a7a1829ef94a6></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; GraphQLModule &#125; from &#39;@nestjs/graphql&#39;;\n\n@Module(&#123;\n  imports: [\n    GraphQLModule.forRoot(&#123;&#125;),\n  ],\n&#125;)\nexport class ApplicationModule &#123;&#125;</code></pre><p>The <code>forRoot()</code> method takes an options object as an argument. These options are passed through to the underlying Apollo instance (read more about available settings <a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/docs/apollo-server/v2/api/apollo-server.html#constructor-options-lt-ApolloServer-gt\">here</a>). For example, if you want to disable the <code>playground</code> and turn off <code>debug</code> mode, pass the following options:</p>\n\n<span class=\"filename\">\n<app-tabs #app0992e6e5f4d6e5e022c7ba9822d26b115b797e33></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; GraphQLModule &#125; from &#39;@nestjs/graphql&#39;;\n\n@Module(&#123;\n  imports: [\n    GraphQLModule.forRoot(&#123;\n      debug: false,\n      playground: false,\n    &#125;),\n  ],\n&#125;)\nexport class ApplicationModule &#123;&#125;</code></pre><p>As mentioned, these options will be forwarded to the <code>ApolloServer</code> constructor.</p>\n<p><app-banner-enterprise></app-banner-enterprise></p>\n<h4 appAnchor id=\"playground\"><span>Playground</span></h4>\n<p>The playground is a graphical, interactive, in-browser GraphQL IDE, available by default on the same URL as the GraphQL server itself. With your application running in the background, open your web browser and navigate to <code>http://localhost:3000/graphql</code> (host and port may vary depending on your configuration). You should see the GraphQL playground, as shown below.</p>\n<figure>\n  <img src=\"/assets/playground.png\" alt=\"\" />\n</figure>\n\n<h4 appAnchor id=\"multiple-endpoints\"><span>Multiple endpoints</span></h4>\n<p>Another useful feature of the <code>@nestjs/graphql</code> module is the ability to serve multiple endpoints at once. This lets you decide which modules should be included in which endpoint. By default, <code>GraphQL</code> searches for resolvers throughout the whole app. To limit this scan to only a subset of modules, use the <code>include</code> property.</p>\n<pre><code class=\"language-typescript\">\nGraphQLModule.forRoot(&#123;\n  include: [CatsModule],\n&#125;),</code></pre>\n<h4 appAnchor id=\"schema-first\"><span>Schema first</span></h4>\n<p>To use the schema first approach, start by adding a <code>typePaths</code> property to the options object.</p>\n<pre><code class=\"language-typescript\">\nGraphQLModule.forRoot(&#123;\n  typePaths: [&#39;./**/*.graphql&#39;],\n&#125;),</code></pre>\n<p>The <code>typePaths</code> property indicates where the <code>GraphQLModule</code> should look for GraphQL files. These files will be combined in memory; this allows you to split your schemas into several files and locate them near their resolvers.</p>\n<p>Creating GraphQL types and corresponding TypeScript definitions is redundant and tedious. It leaves us without a single source of truth -- each change made within SDL forces us to adjust interfaces as well. To address this, the <code>@nestjs/graphql</code> package can automatically generate TS definitions from the abstract syntax tree (AST). To enable this feature, add the <code>definitions</code> options property when configuring the <code>GraphQLModule</code>.</p>\n<pre><code class=\"language-typescript\">\nGraphQLModule.forRoot(&#123;\n  typePaths: [&#39;./**/*.graphql&#39;],\n  definitions: &#123;\n    path: join(process.cwd(), &#39;src/graphql.ts&#39;),\n  &#125;,\n&#125;),</code></pre>\n<p>The path property of the <code>definitions</code> object (e.g., <code>src/graphql.ts</code> above) indicates where to save TypeScript output. By default, all types are generated as interfaces. To generate classes instead, specify the <code>outputAs</code> property with a value of <code>&#39;class&#39;</code>.</p>\n<pre><code class=\"language-typescript\">\nGraphQLModule.forRoot(&#123;\n  typePaths: [&#39;./**/*.graphql&#39;],\n  definitions: &#123;\n    path: join(process.cwd(), &#39;src/graphql.ts&#39;),\n    outputAs: &#39;class&#39;,\n  &#125;,\n&#125;),</code></pre>\n<p>The above approach dynamically generates type definitions each time the application starts. Alternatively, it may be preferable to build a simple script to generate these on demand. For example, assume we create the following script as <code>generate-typings.ts</code>:</p>\n<pre><code class=\"language-typescript\">\nimport &#123; GraphQLDefinitionsFactory &#125; from &#39;@nestjs/graphql&#39;;\nimport &#123; join &#125; from &#39;path&#39;;\n\nconst definitionsFactory = new GraphQLDefinitionsFactory();\ndefinitionsFactory.generate(&#123;\n  typePaths: [&#39;./src/**/*.graphql&#39;],\n  path: join(process.cwd(), &#39;src/graphql.ts&#39;),\n  outputAs: &#39;class&#39;,\n&#125;);</code></pre>\n<p>Now you can run this script only when needed:</p>\n<pre><code class=\"language-bash\">\n$ ts-node generate-typings</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> You can compile the script beforehand (e.g., with <code>tsc</code>) and use <code>node</code> to execute it.\n</blockquote>\n<p>To enable watch mode for the script (to automatically generate typings whenever any <code>.graphql</code> file changes), pass the <code>watch</code> option to the <code>generate()</code> method.</p>\n<pre><code class=\"language-typescript\">\ndefinitionsFactory.generate(&#123;\n  typePaths: [&#39;./src/**/*.graphql&#39;],\n  path: join(process.cwd(), &#39;src/graphql.ts&#39;),\n  outputAs: &#39;class&#39;,\n  watch: true,\n&#125;);</code></pre>\n<p>A fully working sample is available <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/nest/tree/master/sample/12-graphql-apollo\">here</a>.</p>\n<h4 appAnchor id=\"code-first\"><span>Code first</span></h4>\n<p>In the <strong>code first</strong> approach, you use decorators and TypeScript classes to generate the corresponding GraphQL schema.</p>\n<p>Nest uses the powerful <a rel='nofollow' target='_blank' href=\"https://typegraphql.ml/\">type-graphql</a> library under the hood to provide this functionality. To start using it, first install the package.</p>\n<pre><code class=\"language-bash\">\n$ npm i type-graphql</code></pre>\n<p>Once installation is complete, we can add the <code>autoSchemaFile</code> property to the options object.</p>\n<pre><code class=\"language-typescript\">\nGraphQLModule.forRoot(&#123;\n  autoSchemaFile: &#39;schema.gql&#39;,\n&#125;),</code></pre>\n<p>The <code>autoSchemaFile</code> property value is the path where your automatically generated schema will be created. Additionally, you can pass the <code>buildSchemaOptions</code> property - an options object which will be passed in to the <code>buildSchema()</code> function (from the <code>type-graphql</code> package). Alternatively, the schema can be generated on-the-fly in memory. To enable this, set the <code>autoSchemaFile</code> property to <code>true</code>:</p>\n<pre><code class=\"language-typescript\">\nGraphQLModule.forRoot(&#123;\n  autoSchemaFile: true,\n&#125;),</code></pre>\n<p>A fully working sample is available <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/nest/tree/master/sample/23-type-graphql\">here</a>.</p>\n<h4 appAnchor id=\"async-configuration\"><span>Async configuration</span></h4>\n<p>When you need to pass module options asynchronously instead of statically, use the <code>forRootAsync()</code> method. As with most dynamic modules, Nest provides several techniques to deal with async configuration.</p>\n<p>One technique is to use a factory function:</p>\n<pre><code class=\"language-typescript\">\nGraphQLModule.forRootAsync(&#123;\n  useFactory: () =&gt; (&#123;\n    typePaths: [&#39;./**/*.graphql&#39;],\n  &#125;),\n&#125;),</code></pre>\n<p>Like other factory providers, our factory function can be <a href=\"https://docs.nestjs.com/fundamentals/custom-providers#factory-providers-usefactory\">async</a> and can inject dependencies through <code>inject</code>.</p>\n<pre><code class=\"language-typescript\">\nGraphQLModule.forRootAsync(&#123;\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) =&gt; (&#123;\n    typePaths: configService.getString(&#39;GRAPHQL_TYPE_PATHS&#39;),\n  &#125;),\n  inject: [ConfigService],\n&#125;),</code></pre>\n<p>Alternatively, you can configure the <code>GraphQLModule</code> using a class instead of a factory, as shown below:</p>\n<pre><code class=\"language-typescript\">\nGraphQLModule.forRootAsync(&#123;\n  useClass: GqlConfigService,\n&#125;),</code></pre>\n<p>The construction above instantiates <code>GqlConfigService</code> inside <code>GraphQLModule</code>, using it to create options object. Note that in this example, the <code>GqlConfigService</code> has to implement the <code>GqlOptionsFactory</code> interface, as shown below. The <code>GraphQLModule</code> will call the <code>createGqlOptions()</code> method on the instantiated object of the supplied class.</p>\n<pre><code class=\"language-typescript\">\n@Injectable()\nclass GqlConfigService implements GqlOptionsFactory &#123;\n  createGqlOptions(): GqlModuleOptions &#123;\n    return &#123;\n      typePaths: [&#39;./**/*.graphql&#39;],\n    &#125;;\n  &#125;\n&#125;</code></pre>\n<p>If you want to reuse an existing options provider instead of creating a private copy inside the <code>GraphQLModule</code>, use the <code>useExisting</code> syntax.</p>\n<pre><code class=\"language-typescript\">\nGraphQLModule.forRootAsync(&#123;\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n&#125;),</code></pre>\n\n</div>\n\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-resolvers-map',\n  templateUrl: './resolvers-map.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ResolversMapComponent extends BasePageComponent {}\n","\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/resolvers-map.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"resolvers\">Resolvers</h3>\n<p>Typically, you create a resolvers map manually. The <code>@nestjs/graphql</code> package, on the other hand, generates a resolvers map automatically using the metadata provided by the decorators. To demonstrate the library basics, we&#39;ll create a simple authors API.</p>\n<h4 appAnchor id=\"schema-first\"><span>Schema first</span></h4>\n<p>As mentioned in the <a routerLink=\"/graphql/quick-start\">previous</a> chapter, in the schema first approach we manually define our types in SDL (read <a rel='nofollow' target='_blank' href=\"http://graphql.org/learn/schema/#type-language\">more</a>).</p>\n<pre><code class=\"language-graphql\">\ntype Author &#123;\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post]\n&#125;\n\ntype Post &#123;\n  id: Int!\n  title: String!\n  votes: Int\n&#125;\n\ntype Query &#123;\n  author(id: Int!): Author\n&#125;</code></pre>\n<p>Our GraphQL schema contains a single exposed query - <code>author(id: Int!): Author</code>. Now, let&#39;s create an <code>AuthorResolver</code>.</p>\n<pre><code class=\"language-typescript\">\n@Resolver(&#39;Author&#39;)\nexport class AuthorResolver &#123;\n  constructor(\n    private readonly authorsService: AuthorsService,\n    private readonly postsService: PostsService,\n  ) &#123;&#125;\n\n  @Query()\n  async author(@Args(&#39;id&#39;) id: number) &#123;\n    return this.authorsService.findOneById(id);\n  &#125;\n\n  @ResolveProperty()\n  async posts(@Parent() author) &#123;\n    const &#123; id &#125; = author;\n    return this.postsService.findAll(&#123; authorId: id &#125;);\n  &#125;\n&#125;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> If you use the <code>@Resolver()</code> decorator, you don&#39;t have to mark a class as an <code>@Injectable()</code>.\n</blockquote>\n<p>The <code>@Resolver()</code> decorator does not affect queries and mutations (neither <code>@Query()</code> nor <code>@Mutation()</code> decorators). It only informs Nest that each <code>@ResolveProperty()</code> inside this particular class has a parent, which is an <code>Author</code> type in this case (<code>Author.posts</code> relation). Basically, instead of setting <code>@Resolver()</code> at the top of the class, this can be done close to the method:</p>\n<pre><code class=\"language-typescript\">\n@Resolver(&#39;Author&#39;)\n@ResolveProperty()\nasync posts(@Parent() author) &#123;\n  const &#123; id &#125; = author;\n  return this.postsService.findAll(&#123; authorId: id &#125;);\n&#125;</code></pre>\n<p>However, if you have multiple <code>@ResolveProperty()</code> decorators inside one class, you must add <code>@Resolver()</code> to all of them, which is not necessarily a good practice (as it creates extra overhead).</p>\n<p>Conventionally, we would use something like <code>getAuthor()</code> or <code>getPosts()</code> as method names. We can easily do this by passing the real names as arguments of the decorator.</p>\n<pre><code class=\"language-typescript\">\n@Resolver(&#39;Author&#39;)\nexport class AuthorResolver &#123;\n  constructor(\n    private readonly authorsService: AuthorsService,\n    private readonly postsService: PostsService,\n  ) &#123;&#125;\n\n  @Query(&#39;author&#39;)\n  async getAuthor(@Args(&#39;id&#39;) id: number) &#123;\n    return this.authorsService.findOneById(id);\n  &#125;\n\n  @ResolveProperty(&#39;posts&#39;)\n  async getPosts(@Parent() author) &#123;\n    const &#123; id &#125; = author;\n    return this.postsService.findAll(&#123; authorId: id &#125;);\n  &#125;\n&#125;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> The <code>@Resolver()</code> decorator can be used at the method-level as well.\n</blockquote>\n<h4 appAnchor id=\"typings\"><span>Typings</span></h4>\n<p>Assuming that we have enabled the typings generation feature (with <code>outputAs: &#39;class&#39;</code> as shown in the <a routerLink=\"/graphql/quick-start\">previous</a> chapter), once you run the application it should generate the following file:</p>\n<pre><code class=\"language-typescript\">\nexport class Author &#123;\n  id: number;\n  firstName?: string;\n  lastName?: string;\n  posts?: Post[];\n&#125;\n\nexport class Post &#123;\n  id: number;\n  title: string;\n  votes?: number;\n&#125;\n\nexport abstract class IQuery &#123;\n  abstract author(id: number): Author | Promise&lt;Author&gt;;\n&#125;</code></pre>\n<p>Generating classes (instead of interfaces) allows you to use <strong>decorators</strong>, which makes them extremely useful for validation purposes (read <a routerLink=\"/techniques/validation\">more</a>). For example:</p>\n<pre><code class=\"language-typescript\">\nimport &#123; MinLength, MaxLength &#125; from &#39;class-validator&#39;;\n\nexport class CreatePostInput &#123;\n  @MinLength(3)\n  @MaxLength(50)\n  title: string;\n&#125;</code></pre>\n<blockquote class=\"\nwarning \"><strong>Notice</strong> To enable auto-validation of your inputs (and parameters), use <code>ValidationPipe</code>. Read more about validation <a routerLink=\"/techniques/validation\">here</a> or more specifically about pipes <a routerLink=\"/pipes\">here</a>.\n</blockquote>\n<p>However, if you add decorators directly to the automatically generated file, they will be <strong>overwritten</strong> each time the file is generated. Instead, create a separate file and simply extend the generated class.</p>\n<pre><code class=\"language-typescript\">\nimport &#123; MinLength, MaxLength &#125; from &#39;class-validator&#39;;\nimport &#123; Post &#125; from &#39;../../graphql.ts&#39;;\n\nexport class CreatePostInput extends Post &#123;\n  @MinLength(3)\n  @MaxLength(50)\n  title: string;\n&#125;</code></pre>\n<h4 appAnchor id=\"code-first\"><span>Code first</span></h4>\n<p>In the code first approach, we don&#39;t write SDL by hand. Instead we use decorators.</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Field, Int, ObjectType &#125; from &#39;type-graphql&#39;;\nimport &#123; Post &#125; from &#39;./post&#39;;\n\n@ObjectType()\nexport class Author &#123;\n  @Field(type =&gt; Int)\n  id: number;\n\n  @Field(&#123; nullable: true &#125;)\n  firstName?: string;\n\n  @Field(&#123; nullable: true &#125;)\n  lastName?: string;\n\n  @Field(type =&gt; [Post])\n  posts: Post[];\n&#125;</code></pre>\n<p><code>Author</code> model has been created. Now, let&#39;s create the missing <code>Post</code> class.</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Field, Int, ObjectType &#125; from &#39;type-graphql&#39;;\n\n@ObjectType()\nexport class Post &#123;\n  @Field(type =&gt; Int)\n  id: number;\n\n  @Field()\n  title: string;\n\n  @Field(type =&gt; Int, &#123; nullable: true &#125;)\n  votes?: number;\n&#125;</code></pre>\n<p>With our models in place, we can move to the resolver class.</p>\n<pre><code class=\"language-typescript\">\n@Resolver(of =&gt; Author)\nexport class AuthorResolver &#123;\n  constructor(\n    private readonly authorsService: AuthorsService,\n    private readonly postsService: PostsService,\n  ) &#123;&#125;\n\n  @Query(returns =&gt; Author)\n  async author(@Args(&#123; name: &#39;id&#39;, type: () =&gt; Int &#125;) id: number) &#123;\n    return this.authorsService.findOneById(id);\n  &#125;\n\n  @ResolveProperty()\n  async posts(@Parent() author) &#123;\n    const &#123; id &#125; = author;\n    return this.postsService.findAll(&#123; authorId: id &#125;);\n  &#125;\n&#125;</code></pre>\n<p>Conventionally, we would use something like <code>getAuthor()</code> or <code>getPosts()</code> as method names. We can easily do this by passing the real names as arguments of the decorator.</p>\n<pre><code class=\"language-typescript\">\n@Resolver(of =&gt; Author)\nexport class AuthorResolver &#123;\n  constructor(\n    private readonly authorsService: AuthorsService,\n    private readonly postsService: PostsService,\n  ) &#123;&#125;\n\n  @Query(returns =&gt; Author, &#123; name: &#39;author&#39; &#125;)\n  async getAuthor(@Args(&#123; name: &#39;id&#39;, type: () =&gt; Int &#125;) id: number) &#123;\n    return this.authorsService.findOneById(id);\n  &#125;\n\n  @ResolveProperty(&#39;posts&#39;, returns =&gt; [Post])\n  async getPosts(@Parent() author) &#123;\n    const &#123; id &#125; = author;\n    return this.postsService.findAll(&#123; authorId: id &#125;);\n  &#125;\n&#125;</code></pre>\n<p>Usually, you won&#39;t have to pass such an object into the <code>@Args()</code> decorator. For example, if your identifier&#39;s type is string, the following construction would be sufficient:</p>\n<pre><code class=\"language-typescript\">\n@Args(&#39;id&#39;) id: string</code></pre>\n<p>However, the <code>number</code> type doesn&#39;t give <code>type-graphql</code> enough information about the expected GraphQL representation (<code>Int</code> vs. <code>Float</code>). Thus we have to <strong>explicitly</strong> pass the type reference.</p>\n<p>Moreover, you can create a dedicated <code>AuthorArgs</code> class:</p>\n<pre><code class=\"language-typescript\">\n@Args() args: AuthorArgs</code></pre>\n<p>With the following body:</p>\n<pre><code class=\"language-typescript\">\n@ArgsType()\nclass AuthorArgs &#123;\n  @Field(type =&gt; Int)\n  @Min(1)\n  id: number;\n&#125;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> <code>Int</code> and both decorators <code>@Field()</code> and <code>@ArgsType()</code> are imported from the <code>type-graphql</code> package, while <code>@Min()</code> comes from the <code>class-validator</code>.\n</blockquote>\n<p>You may also notice that such classes play very well with the <code>ValidationPipe</code> (read <a routerLink=\"/techniques/validation\">more</a>).</p>\n<p><app-banner-shop></app-banner-shop></p>\n<h4 appAnchor id=\"decorators\"><span>Decorators</span></h4>\n<p>You may note that we refer to the following arguments using dedicated decorators. Below is a comparison of the provided decorators and the plain Apollo parameters they represent.</p>\n<table>\n  <tbody>\n    <tr>\n      <td><code>@Root()</code> and <code>@Parent()</code></td>\n      <td><code>root</code>/<code>parent</code></td>\n    </tr>\n    <tr>\n      <td><code>@Context(param?: string)</code></td>\n      <td><code>context</code> / <code>context[param]</code></td>\n    </tr>\n    <tr>\n      <td><code>@Info(param?: string)</code></td>\n      <td><code>info</code> / <code>info[param]</code></td>\n    </tr>\n    <tr>\n      <td><code>@Args(param?: string)</code></td>\n      <td><code>args</code> / <code>args[param]</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 appAnchor id=\"module\"><span>Module</span></h4>\n<p>Once we&#39;re done here, we have to provide the <code>AuthorResolver</code> somewhere. For example, we can do this in the newly created <code>AuthorsModule</code>.</p>\n<pre><code class=\"language-typescript\">\n@Module(&#123;\n  imports: [PostsModule],\n  providers: [AuthorsService, AuthorResolver],\n&#125;)\nexport class AuthorsModule &#123;&#125;</code></pre>\n<p>The <code>GraphQLModule</code> will take care of reflecting the metadata and transforming classes into the correct resolvers map automatically. The only thing you need to be aware of is that you need to import this module somewhere, so Nest will be able to utilize <code>AuthorsModule</code>.</p>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> Learn more about GraphQL queries <a rel='nofollow' target='_blank' href=\"http://graphql.org/learn/queries/\">here</a>.\n</blockquote>\n\n</div>\n\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-scalars',\n  templateUrl: './scalars.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScalarsComponent extends BasePageComponent {}\n","\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/scalars.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"scalars\">Scalars</h3>\n<p>GraphQL includes the following default types: <code>Int</code>, <code>Float</code>, <code>String</code>, <code>Boolean</code> and <code>ID</code>. In addition to these built-in types, you may need to support custom atomic data types (e.g., <code>Date</code>).</p>\n<h4 appAnchor id=\"schema-first\"><span>Schema first</span></h4>\n<p>To define a custom scalar (read more about scalars <a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/docs/graphql-tools/scalars.html\">here</a>), create a type definition and a dedicated resolver. Here (as in the official documentation), we’ll use the <code>graphql-type-json</code> package for demonstration purposes. This npm package defines a <code>JSON</code> GraphQL scalar type.</p>\n<p>Start by installing the package:</p>\n<pre><code class=\"language-bash\">\n$ npm i --save graphql-type-json</code></pre>\n<p>Once the package is installed, we pass a custom resolver to the <code>forRoot()</code> method:</p>\n<pre><code class=\"language-typescript\">\nimport * as GraphQLJSON from &#39;graphql-type-json&#39;;\n\n@Module(&#123;\n  imports: [\n    GraphQLModule.forRoot(&#123;\n      typePaths: [&#39;./**/*.graphql&#39;],\n      resolvers: &#123; JSON: GraphQLJSON &#125;,\n    &#125;),\n  ],\n&#125;)\nexport class ApplicationModule &#123;&#125;</code></pre>\n<p>Now we can use the <code>JSON</code> scalar in our type definitions:</p>\n<pre><code class=\"language-graphql\">\nscalar JSON\n\ntype Foo &#123;\n  field: JSON\n&#125;</code></pre>\n<p>Another method to define a scalar type is to create a simple class. Assume we want to enhance our schema with the <code>Date</code> type.</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Scalar, CustomScalar &#125; from &#39;@nestjs/graphql&#39;;\nimport &#123; Kind, ValueNode &#125; from &#39;graphql&#39;;\n\n@Scalar(&#39;Date&#39;)\nexport class DateScalar implements CustomScalar&lt;number, Date&gt; &#123;\n  description = &#39;Date custom scalar type&#39;;\n\n  parseValue(value: number): Date &#123;\n    return new Date(value); // value from the client\n  &#125;\n\n  serialize(value: Date): number &#123;\n    return value.getTime(); // value sent to the client\n  &#125;\n\n  parseLiteral(ast: ValueNode): Date &#123;\n    if (ast.kind === Kind.INT) &#123;\n      return new Date(ast.value);\n    &#125;\n    return null;\n  &#125;\n&#125;</code></pre>\n<p>With this in place, register <code>DateScalar</code> as a provider.</p>\n<pre><code class=\"language-typescript\">\n@Module(&#123;\n  providers: [DateScalar],\n&#125;)\nexport class CommonModule &#123;&#125;</code></pre>\n<p>Now we can use the <code>Date</code> scalar in type definitions.</p>\n<pre><code class=\"language-graphql\">\nscalar Date</code></pre>\n<h4 appAnchor id=\"code-first\"><span>Code first</span></h4>\n<p>To create a <code>Date</code> scalar, simply create a new class.</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Scalar, CustomScalar &#125; from &#39;@nestjs/graphql&#39;;\nimport &#123; Kind, ValueNode &#125; from &#39;graphql&#39;;\n\n@Scalar(&#39;Date&#39;, type =&gt; Date)\nexport class DateScalar implements CustomScalar&lt;number, Date&gt; &#123;\n  description = &#39;Date custom scalar type&#39;;\n\n  parseValue(value: number): Date &#123;\n    return new Date(value); // value from the client\n  &#125;\n\n  serialize(value: Date): number &#123;\n    return value.getTime(); // value sent to the client\n  &#125;\n\n  parseLiteral(ast: ValueNode): Date &#123;\n    if (ast.kind === Kind.INT) &#123;\n      return new Date(ast.value);\n    &#125;\n    return null;\n  &#125;\n&#125;</code></pre>\n<p>With this in place, register <code>DateScalar</code> as a provider.</p>\n<pre><code class=\"language-typescript\">\n@Module(&#123;\n  providers: [DateScalar],\n&#125;)\nexport class CommonModule &#123;&#125;</code></pre>\n<p>Now we can use the <code>Date</code> type in our classes.</p>\n<pre><code class=\"language-typescript\">\n@Field()\ncreationDate: Date;</code></pre>\n\n</div>\n\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-schema-stitching',\n  templateUrl: './schema-stitching.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SchemaStitchingComponent extends BasePageComponent {\n  get stitchingExample() {\n    return `\nmergeInfo => ({\n  User: {\n    chirps: {\n      fragment: \\`fragment UserFragment on User { id }\\`,\n      resolve(parent, args, context, info) {\n        const authorId = parent.id;\n        return mergeInfo.delegate(\n          'query',\n          'chirpsByAuthorId',\n          {\n            authorId,\n          },\n          context,\n          info,\n        );\n      },\n    },\n  }\n})`;\n  }\n\n  get stitchNestWay() {\n    return `\n@Resolver('User')\n@DelegateProperty('chirps')\nfindChirpsByUserId() {\n  return (mergeInfo: MergeInfo) => ({\n    fragment: \\`fragment UserFragment on User { id }\\`,\n    resolve(parent, args, context, info) {\n      const authorId = parent.id;\n      return mergeInfo.delegate(\n        'query',\n        'chirpsByAuthorId',\n        {\n          authorId,\n        },\n        context,\n        info,\n      );\n    },\n  });\n}`;\n  }\n\n  get createSchema() {\n    return `\nconfigure(consumer) {\n  const typeDefs = this.graphQLFactory.mergeTypesByPaths('./**/*.graphql');\n  const localSchema = this.graphQLFactory.createSchema({ typeDefs });\n  const delegates = this.graphQLFactory.createDelegates();\n  const schema = mergeSchemas({\n    schemas: [localSchema, chirpSchema, linkTypeDefs],\n    resolvers: delegates,\n  });\n\n  consumer\n    .apply(graphqlExpress(req => ({ schema, rootValue: req })))\n    .forRoutes('/graphql');\n}`;\n  }\n\n  get chirpsSchema() {\n    return `\nimport { makeExecutableSchema } from 'graphql-tools';\n    \nconst chirpSchema = makeExecutableSchema({\n  typeDefs: \\`\n    type Chirp {\n      id: ID!\n      text: String\n      authorId: ID!\n    }\n\n    type Query {\n      chirpById(id: ID!): Chirp\n      chirpsByAuthorId(authorId: ID!): [Chirp]\n    }\n  \\`\n});\nconst linkTypeDefs = \\`\n  extend type User {\n    chirps: [Chirp]\n  }\n\n  extend type Chirp {\n    author: User\n  }\n\\`;`;\n  }\n}\n","<div class=\"content\">\n  <h3>Schema stitching</h3>\n  <p>\n    The schema stitching is a feature that allows creating a single GraphQL schema from multiple underlying GraphQL APIs. You\n    can read more about it <a href=\"https://www.apollographql.com/docs/graphql-tools/schema-stitching.html\" target=\"_blank\" rel=\"nofollow\">here</a>.\n  </p>\n  <h4>Proxying</h4>\n  <p>\n    To add the ability to proxy fields between schemas, you need to create additional resolvers between them. Let's have a look\n    on the example from the <a href=\"https://www.apollographql.com/docs/graphql-tools/schema-stitching.html#adding-resolvers\"\n      target=\"_blank\" rel=\"nofollow\">Apollo</a> documentation:\n  </p>\n  <pre><code class=\"language-typescript\">{{ stitchingExample }}</code></pre>\n  <p>\n    Here we delegate <code>chirps</code> property of <code>User</code> to another GraphQL API. In order to achieve the same\n    behavior in Nest, we use <code>@DelegateProperty()</code> decorator.\n  </p>\n  <pre><code class=\"language-typescript\">{{ stitchNestWay }}</code></pre>\n  <blockquote class=\"info\">\n    <strong>Hint</strong> The <code>@Resolver()</code> decorator is used here at the method-level, but you can use it at\n    top (class) level as well.\n  </blockquote>\n  <p>\n    Then, let's take a step back to the <code>graphqlExpress</code> middleware. We need to merge our schemas and add delegates\n    between them. To create delegates we use <code>createDelegates()</code> method of the <code>GraphQLFactory</code> class.\n  </p>\n  <span class=\"filename\">\n    {{ 'app.module' | extension: appModuleSchemaT.isJsActive }}\n    <app-tabs #appModuleSchemaT></app-tabs>\n  </span>\n  <pre><code class=\"language-typescript\">{{ createSchema }}</code></pre>\n  <p>\n    In order to merge schemas, we have used <code>mergeSchemas()</code> function (<a href=\"https://www.apollographql.com/docs/graphql-tools/schema-stitching.html#mergeSchemas\"\n      target=\"_blank\" rel=\"nofollow\">read more</a>). Moreover, you may notice <code>chirpsSchema</code> and <code>linkTypeDefs</code> variables.\n    They're copied & pasted directly from the <a href=\"https://www.apollographql.com/docs/graphql-tools/schema-stitching.html\"\n      target=\"_blank\" rel=\"nofollow\">Apollo</a> documentation.\n  </p>\n  <span class=\"filename\"><app-tabs></app-tabs></span>\n  <pre><code class=\"language-typescript\">{{ chirpsSchema }}</code></pre>\n  <p>\n    That's all.\n  </p>\n</div>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-subscriptions',\n  templateUrl: './subscriptions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SubscriptionsComponent extends BasePageComponent {}\n","\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/graphql/subscriptions.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"subscriptions\">Subscriptions</h3>\n<p>Subscription is another GraphQL operation type, like Query and Mutation. It allows creating real-time subscriptions over a bi-directional transport layer, mainly over websockets. Read more about subscriptions <a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/docs/graphql-subscriptions\">here</a>. Below is a <code>commentAdded</code> subscription example, copied directly from the official <a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/docs/graphql-subscriptions/subscriptions-to-schema.html\">Apollo</a> documentation.</p>\n<pre><code class=\"language-typescript\">\nSubscription: &#123;\n  commentAdded: &#123;\n    subscribe: () =&gt; pubSub.asyncIterator(&#39;commentAdded&#39;);\n  &#125;\n&#125;</code></pre>\n<blockquote class=\"\nwarning \"><strong>Notice</strong> The <code>pubSub</code> object is an instance of the <code>PubSub</code> class. Read more about it <a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/docs/graphql-subscriptions/setup.html\">here</a>.\n</blockquote>\n<h4 appAnchor id=\"schema-first\"><span>Schema first</span></h4>\n<p>To create an equivalent subscription in Nest, we&#39;ll make use of the <code>@Subscription()</code> decorator.</p>\n<pre><code class=\"language-typescript\">\nconst pubSub = new PubSub();\n\n@Resolver(&#39;Author&#39;)\nexport class AuthorResolver &#123;\n  constructor(\n    private readonly authorsService: AuthorsService,\n    private readonly postsService: PostsService,\n  ) &#123;&#125;\n\n  @Query(&#39;author&#39;)\n  async getAuthor(@Args(&#39;id&#39;) id: number) &#123;\n    return this.authorsService.findOneById(id);\n  &#125;\n\n  @ResolveProperty(&#39;posts&#39;)\n  async getPosts(@Parent() author) &#123;\n    const &#123; id &#125; = author;\n    return this.postsService.findAll(&#123; authorId: id &#125;);\n  &#125;\n\n  @Subscription()\n  commentAdded() &#123;\n    return pubSub.asyncIterator(&#39;commentAdded&#39;);\n  &#125;\n&#125;</code></pre>\n<p>To filter out specific events based on context and arguments, set the <code>filter</code> property.</p>\n<pre><code class=\"language-typescript\">\n@Subscription(&#39;commentAdded&#39;, &#123;\n  filter: (payload, variables) =&gt;\n    payload.commentAdded.repositoryName === variables.repoFullName,\n&#125;)\ncommentAdded() &#123;\n  return pubSub.asyncIterator(&#39;commentAdded&#39;);\n&#125;</code></pre>\n<p>To mutate the published payload, we can use a <code>resolve</code> function.</p>\n<pre><code class=\"language-typescript\">\n@Subscription(&#39;commentAdded&#39;, &#123;\n  resolve: value =&gt; value,\n&#125;)\ncommentAdded() &#123;\n  return pubSub.asyncIterator(&#39;commentAdded&#39;);\n&#125;</code></pre>\n<p>If you need to access injected providers (e.g., use an external service to validate the data), use the following construction:</p>\n<pre><code class=\"language-typescript\">\n@Subscription(&#39;commentAdded&#39;, &#123;\n  resolve(this: AuthorResolver, value) &#123;\n    // &quot;this&quot; refers to an instance of &quot;AuthorResolver&quot;\n    return value;\n  &#125;\n&#125;)\ncommentAdded() &#123;\n  return pubSub.asyncIterator(&#39;commentAdded&#39;);\n&#125;</code></pre>\n<p>The same construction works with filters:</p>\n<pre><code class=\"language-typescript\">\n@Subscription(&#39;commentAdded&#39;, &#123;\n  filter(this: AuthorResolver, payload, variables) &#123;\n    // &quot;this&quot; refers to an instance of &quot;AuthorResolver&quot;\n    return payload.commentAdded.repositoryName === variables.repoFullName;\n  &#125;\n&#125;)\ncommentAdded() &#123;\n  return pubSub.asyncIterator(&#39;commentAdded&#39;);\n&#125;</code></pre>\n<h4 appAnchor id=\"type-definitions\"><span>Type definitions</span></h4>\n<p>The last step is to update the type definitions file.</p>\n<pre><code class=\"language-graphql\">\ntype Author &#123;\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post]\n&#125;\n\ntype Post &#123;\n  id: Int!\n  title: String\n  votes: Int\n&#125;\n\ntype Query &#123;\n  author(id: Int!): Author\n&#125;\n\ntype Comment &#123;\n  id: String\n  content: String\n&#125;\n\ntype Subscription &#123;\n  commentAdded(repoFullName: String!): Comment\n&#125;</code></pre>\n<p>With this, we&#39;ve created a single <code>commentAdded(repoFullName: String!): Comment</code> subscription. You can find a full sample implementation <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/nest/blob/master/sample/12-graphql-apollo\">here</a>.</p>\n<h4 appAnchor id=\"code-first\"><span>Code first</span></h4>\n<p>To create a subscription using the code-first approach, we&#39;ll make use of the <code>@Subscription()</code> decorator.</p>\n<pre><code class=\"language-typescript\">\nconst pubSub = new PubSub();\n\n@Resolver(&#39;Author&#39;)\nexport class AuthorResolver &#123;\n  constructor(\n    private readonly authorsService: AuthorsService,\n    private readonly postsService: PostsService,\n  ) &#123;&#125;\n\n  @Query(returns =&gt; Author, &#123; name: &#39;author&#39; &#125;)\n  async getAuthor(@Args(&#123; name: &#39;id&#39;, type: () =&gt; Int &#125;) id: number) &#123;\n    return this.authorsService.findOneById(id);\n  &#125;\n\n  @ResolveProperty(&#39;posts&#39;)\n  async getPosts(@Parent() author) &#123;\n    const &#123; id &#125; = author;\n    return this.postsService.findAll(&#123; authorId: id &#125;);\n  &#125;\n\n  @Subscription(returns =&gt; Comment)\n  commentAdded() &#123;\n    return pubSub.asyncIterator(&#39;commentAdded&#39;);\n  &#125;\n&#125;</code></pre>\n<p>To filter out specific events based on context and arguments, set the <code>filter</code> property.</p>\n<pre><code class=\"language-typescript\">\n@Subscription(returns =&gt; Comment, &#123;\n  filter: (payload, variables) =&gt;\n    payload.commentAdded.repositoryName === variables.repoFullName,\n&#125;)\ncommentAdded(@Args(&#123; name: &#39;repoFullName&#39;, type: () =&gt; String &#125;) repoFullName: string ) &#123;\n  return pubSub.asyncIterator(&#39;commentAdded&#39;);\n&#125;</code></pre>\n<p>To mutate the published payload, we can use a <code>resolve</code> function.</p>\n<pre><code class=\"language-typescript\">\n@Subscription(returns =&gt; Comment, &#123;\n  resolve: value =&gt; value,\n&#125;)\ncommentAdded() &#123;\n  return pubSub.asyncIterator(&#39;commentAdded&#39;);\n&#125;</code></pre>\n<h4 appAnchor id=\"pubsub\"><span>PubSub</span></h4>\n<p>We used a local <code>PubSub</code> instance above. The preferred approach is to define <code>PubSub</code> as a <a routerLink=\"/fundamentals/custom-providers\">provider</a> and inject it through the constructor (using the <code>@Inject()</code> decorator). This allows us to re-use the instance across the whole application.</p>\n<pre><code class=\"language-typescript\">\n&#123;\n  provide: &#39;PUB_SUB&#39;,\n  useValue: new PubSub(),\n&#125;</code></pre>\n<h4 appAnchor id=\"module\"><span>Module</span></h4>\n<p>To enable subscriptions, set the <code>installSubscriptionHandlers</code> property to <code>true</code>.</p>\n<pre><code class=\"language-typescript\">\nGraphQLModule.forRoot(&#123;\n  typePaths: [&#39;./**/*.graphql&#39;],\n  installSubscriptionHandlers: true,\n&#125;),</code></pre>\n<p>To customize the subscriptions server (e.g., change the listener port), use the <code>subscriptions</code> options property (read <a rel='nofollow' target='_blank' href=\"https://www.apollographql.com/docs/apollo-server/v2/api/apollo-server.html#constructor-options-lt-ApolloServer-gt\">more</a>).</p>\n\n</div>\n\n"]}